@page "/blazor-state-demo"
@using System.Text

@inherits BlazorState.BlazorStateComponent

<h2>Blazor-state demo</h2>

<div>Main component: <pre>@State.HolidayMessage</pre></div>
<div>
    Main component rerenders:
    <pre>
       @RerenderLog
    </pre>
</div>
<div>Subcomponent: <StateRerenderDemoSubcomponent /></div>
<button @onclick="ChangeMessage">Change message in state</button>
<button @onclick="ChangeSignature">Change signature in state</button>

<div>
    <p>
        <a href="https://github.com/TimeWarpEngineering/blazor-state/issues/266">Regarding Blazor-State issue 266</a>:
    </p>
    <p>
    The issue: it would be very nice if a change to the message didn't cause a rerender of the signature subcomponent,
    since nothing in depends on it has changed. Conversely, it would be very nice if a change to the signature didn't cause a rerender of this main component,
    since nothing it depends on has changed.</p>
    <p>Furthermore, this should be done without complicated "registration" code in each subcomponent.
    Ideally, BlazorStateComponent should: '
    (1) Know which parts of the state have changed;
    (2) Know which parts of the state are referenced by the component either in markup or in code;
    (3) Call StateHasChanged only if there is any property that is in both 1 and 2.
    </p>
    <p>It seems like #2 is the tough part. (Manually setting up the criteria for avoiding a rerender is already possible by overriding ShouldRender.)</p>

</div>

@code{
    private MyMonolithicState State => base.GetState<MyMonolithicState>();

    private async Task ChangeMessage() =>
        await Mediator.Send(new MyMonolithicState.ChangeMessageAction());



    private async Task ChangeSignature() =>
        await Mediator.Send(new MyMonolithicState.ChangeSignatureAction());

    private StringBuilder RerenderLog { get; } = new();
    protected override bool ShouldRender()
    {
        bool result = base.ShouldRender();
        if (result) RerenderLog.AppendLine(DateTime.Now.ToString());
        return result;
    }

}